
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DO DOT ELSE EQ FOR GT ID IF LBRACE LPAREN LT NUMBER PLUS RBRACE RPAREN SEMI STRING WHILEstatements : statements statement\n                  | statementstatement : LBRACE statements RBRACEstatement : FOR LPAREN declaration SEMI expression SEMI expression RPAREN statementdeclaration : ID EQ NUMBER\n                   | ID EQ IDstatement : expression SEMIexpression : IDexpression : NUMBERexpression : expression GT expression\n                  | expression LT expression\n                  | expression EQ expression\n                  | expression PLUS expressionexpression : ID DOT ID DOT ID LPAREN STRING PLUS expression RPAREN\n                  | ID DOT ID DOT ID LPAREN STRING RPAREN'
    
_lr_action_items = {'LBRACE':([0,1,2,3,8,9,11,17,36,39,],[3,3,-2,3,-1,3,-7,-3,3,-4,]),'FOR':([0,1,2,3,8,9,11,17,36,39,],[4,4,-2,4,-1,4,-7,-3,4,-4,]),'ID':([0,1,2,3,8,9,10,11,12,13,14,15,16,17,25,26,27,32,36,37,39,],[6,6,-2,6,-1,6,19,-7,6,6,6,6,24,-3,6,29,31,6,6,6,-4,]),'NUMBER':([0,1,2,3,8,9,11,12,13,14,15,17,25,26,32,36,37,39,],[7,7,-2,7,-1,7,-7,7,7,7,7,-3,7,30,7,7,7,-4,]),'$end':([1,2,8,11,17,39,],[0,-2,-1,-7,-3,-4,]),'RBRACE':([2,8,9,11,17,39,],[-2,-1,17,-7,-3,-4,]),'LPAREN':([4,31,],[10,33,]),'SEMI':([5,6,7,18,20,21,22,23,28,29,30,38,41,],[11,-8,-9,25,-10,-11,-12,-13,32,-6,-5,-15,-14,]),'GT':([5,6,7,20,21,22,23,28,34,38,40,41,],[12,-8,-9,12,12,12,12,12,12,-15,12,-14,]),'LT':([5,6,7,20,21,22,23,28,34,38,40,41,],[13,-8,-9,13,13,13,13,13,13,-15,13,-14,]),'EQ':([5,6,7,19,20,21,22,23,28,34,38,40,41,],[14,-8,-9,26,14,14,14,14,14,14,-15,14,-14,]),'PLUS':([5,6,7,20,21,22,23,28,34,35,38,40,41,],[15,-8,-9,15,15,15,15,15,15,37,-15,15,-14,]),'RPAREN':([6,7,20,21,22,23,34,35,38,40,41,],[-8,-9,-10,-11,-12,-13,36,38,-15,41,-14,]),'DOT':([6,24,],[16,27,]),'STRING':([33,],[35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,3,],[1,9,]),'statement':([0,1,3,9,36,],[2,8,2,8,39,]),'expression':([0,1,3,9,12,13,14,15,25,32,36,37,],[5,5,5,5,20,21,22,23,28,34,5,40,]),'declaration':([10,],[18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','views.py',64),
  ('statements -> statement','statements',1,'p_statements','views.py',65),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','views.py',72),
  ('statement -> FOR LPAREN declaration SEMI expression SEMI expression RPAREN statement','statement',9,'p_statement_for','views.py',76),
  ('declaration -> ID EQ NUMBER','declaration',3,'p_declaration','views.py',80),
  ('declaration -> ID EQ ID','declaration',3,'p_declaration','views.py',81),
  ('statement -> expression SEMI','statement',2,'p_statement_expression','views.py',85),
  ('expression -> ID','expression',1,'p_expression_id','views.py',89),
  ('expression -> NUMBER','expression',1,'p_expression_number','views.py',93),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','views.py',97),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','views.py',98),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','views.py',99),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','views.py',100),
  ('expression -> ID DOT ID DOT ID LPAREN STRING PLUS expression RPAREN','expression',10,'p_expression_system_print','views.py',104),
  ('expression -> ID DOT ID DOT ID LPAREN STRING RPAREN','expression',8,'p_expression_system_print','views.py',105),
]
